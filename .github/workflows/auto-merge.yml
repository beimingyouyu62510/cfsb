name: Proxy Update

on:
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次
  workflow_dispatch:
  # 启用手动运行功能

jobs:
  generate-and-commit-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml aiohttp

      - name: Create directories
        run: |
          mkdir -p providers
          mkdir -p logs

      - name: List files for debugging
        run: |
          echo "当前目录文件:"
          ls -la
          echo "merge.py 存在吗?"
          if [[ -f "merge.py" ]]; then
            echo "✅ merge.py 存在"
            head -5 merge.py
          else
            echo "❌ merge.py 不存在"
          fi

      - name: Run the script
        run: |
          if [[ -f "merge.py" ]]; then
            echo "运行优化版merge.py"
            python merge.py 2>&1 | tee logs/merge_$(date +%Y%m%d_%H%M%S).log
          else
            echo "merge.py不存在，创建空配置文件"
            echo "proxies: []" > providers/all.yaml
            echo "proxies: []" > providers/us.yaml
          fi

      - name: Check results
        id: check_results
        run: |
          echo "检查生成的文件..."
          
          if [[ -f "providers/all.yaml" ]]; then
            ALL_COUNT=$(grep -c "^- name:" providers/all.yaml || echo "0")
            ALL_SIZE=$(du -h providers/all.yaml | cut -f1)
            echo "all_count=$ALL_COUNT" >> $GITHUB_OUTPUT
            echo "all_size=$ALL_SIZE" >> $GITHUB_OUTPUT
            echo "✅ providers/all.yaml: $ALL_COUNT 节点, $ALL_SIZE"
          else
            echo "all_count=0" >> $GITHUB_OUTPUT
            echo "all_size=0" >> $GITHUB_OUTPUT
            echo "❌ providers/all.yaml 文件不存在"
            # 创建空文件
            echo "proxies: []" > providers/all.yaml
          fi
          
          if [[ -f "providers/us.yaml" ]]; then
            US_COUNT=$(grep -c "^- name:" providers/us.yaml || echo "0")
            US_SIZE=$(du -h providers/us.yaml | cut -f1)
            echo "us_count=$US_COUNT" >> $GITHUB_OUTPUT
            echo "us_size=$US_SIZE" >> $GITHUB_OUTPUT
            echo "✅ providers/us.yaml: $US_COUNT 节点, $US_SIZE"
          else
            echo "us_count=0" >> $GITHUB_OUTPUT
            echo "us_size=0" >> $GITHUB_OUTPUT
            echo "❌ providers/us.yaml 文件不存在"
            # 创建空文件
            echo "proxies: []" > providers/us.yaml
          fi

      - name: Validate YAML files
        run: |
          echo "验证YAML文件格式..."
          python -c "
import yaml
import sys

files = ['providers/all.yaml', 'providers/us.yaml']
all_valid = True

for file in files:
    try:
        with open(file, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
            proxies = data.get('proxies', []) if data else []
            print(f'✅ {file} 格式正确，包含 {len(proxies)} 个节点')
    except Exception as e:
        print(f'❌ {file} 格式错误: {e}')
        all_valid = False

sys.exit(0 if all_valid else 1)
"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet providers/all.yaml providers/us.yaml 2>/dev/null; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📝 没有检测到配置文件的变化"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 检测到配置文件有变化"
            git diff --stat providers/all.yaml providers/us.yaml || true
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add providers/all.yaml providers/us.yaml
          
          # 如果质量报告存在，也一并提交
          if [[ -f "quality_report.json" ]]; then
            git add quality_report.json
          fi
          
          COMMIT_MSG="feat: Auto update proxy list

📊 节点统计:
- 全量节点: ${{ steps.check_results.outputs.all_count }} 个
- 美国节点: ${{ steps.check_results.outputs.us_count }} 个

🕐 更新时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
🤖 自动化运行 #${{ github.run_number }}"
          
          git commit -m "$COMMIT_MSG"
          git push

      - name: Create summary
        if: always()
        run: |
          echo "## 🚀 代理节点更新摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 文件 | 节点数量 | 文件大小 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|----------|------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "providers/all.yaml" ]]; then
            echo "| providers/all.yaml | ${{ steps.check_results.outputs.all_count }} | ${{ steps.check_results.outputs.all_size }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| providers/all.yaml | 0 | - | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "providers/us.yaml" ]]; then
            echo "| providers/us.yaml | ${{ steps.check_results.outputs.us_count }} | ${{ steps.check_results.outputs.us_size }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| providers/us.yaml | 0 | - | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 更新状态" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.changes.outputs.has_changes }}" == "true" ]]; then
            echo "✅ 配置文件已更新并提交" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ 没有变化，跳过提交" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚙️ 运行信息" >> $GITHUB_STEP_SUMMARY
          echo "- 运行时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- 运行编号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python版本: $(python --version)" >> $GITHUB_STEP_SUMMARY

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merge-logs-${{ github.run_number }}
          path: logs/
          retention-days: 3
        continue-on-error: true
