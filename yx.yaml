allow-lan: true
unified-delay: false
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome
profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  sniff:
    HTTP:
      ports:
        - 80
        - 8080-8880
      override-destination: true
    TLS:
      ports:
        - 443
        - 8443
    QUIC:
      ports:
        - 443
        - 8443
  skip-domain:
    - mijia.cloud
    - dlg.io.mi.com
    - "*.push.apple.com"
    - "*.icloud.com"
    - "*.mi.com"
    - "*.lan"
    - "*.local"

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
    - tcp://any:53
    - udp://any:53
  auto-route: true
  auto-detect-interface: true
  strict-route: true
  endpoint-independent-nat: true

dns:
  enable: true
  listen: 0.0.0.0:53
  ipv6: false
  prefer-h3: true
  respect-rules: true
  enhanced-mode: fake-ip
  use-hosts: true
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
  proxy-server-nameserver:
    - 8.8.8.8
    - 1.1.1.1
    - 1.0.0.1
    - 8.8.4.4
  nameserver-policy:
    "cn,apple-cn,category-games,private,ChinaDomain,ChinaCompanyIp,ChinaMedia":
      - 223.5.5.5
      - 117.50.11.11
      - https://dns.alidns.com/dns-query
    "google,youtube,netflix,github,openai,microsoft,apple,telegram,discord":
      - https://dns.google/dns-query
      - https://1.1.1.1/dns-query
      - https://dns.cloudflare.com/dns-query
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter:
    - "*.lan"
    - "*.local"
    - +.stun.*.*
    - +.stun.*.*.*
    - +.stun.*.*.*.*
    - +.stun.*.*.*.*.*

proxies:
  # 请在此处插入您的实际节点信息 (New-Git, New-CF, 天书git, 天书cf)
  # 示例 (请替换为您的真实配置):
  - name: New-Git
    type: vless
    server: laji.jisucf.cloudns.biz
    port: 443
    uuid: 5fbbf263-0518-446c-8ef2-13b2001aa69d
    cipher: none
    tls: true
    servername: new.jisucf.cloudns.ch
    network: ws
    ws-opts:
      path: "/"
      headers:
        Host: new.jisucf.cloudns.ch
  - name: New-CF
    type: vless
    server: new.jisucf.cloudns.biz
    port: 443
    uuid: 28fe704b-4648-4f60-915c-31cf551cd006
    cipher: none
    tls: true
    servername: new.jisucf.cloudns.biz
    network: ws
    ws-opts:
      path: "/"
      headers:
        Host: new.jisucf.cloudns.biz
  # ... (其他代理节点)


proxy-groups:
  - name: ♻️ 自动选择
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 180
    tolerance: 30
    proxies:
      - New-Git
      - New-CF
      - 天书git
      - 天书cf
  - name: 🚀 节点选择
    type: select
    proxies:
      - ♻️ 自动选择
  - name: 🌐 智能兜底 # 这里的 select 组将调用脚本
    type: select
    proxies:
      - script:select_smart_function # 直接调用脚本中定义的函数
      - DIRECT
      - ♻️ 自动选择
  - name: 🌍 国外媒体
    type: select
    proxies:
      - 🚀 节点选择
      - DIRECT
  - name: 📲 电报信息
    type: select
    proxies:
      - 🚀 节点选择
      - DIRECT
  - name: Ⓜ️ 微软服务
    type: select
    proxies:
      - DIRECT
      - 🚀 节点选择
  - name: 🍎 苹果服务
    type: select
    proxies:
      - 🚀 节点选择
      - DIRECT
  - name: 🎯 全球直连
    type: select
    proxies:
      - DIRECT
  - name: 🛑 全球拦截
    type: select
    proxies:
      - REJECT
  - name: 🍃 应用净化
    type: select
    proxies:
      - REJECT

# *** 核心修复：内联脚本代码 ***
script:
  # 使用 code 字段来内嵌 Javascript 代码，彻底消除外部文件引用。
  code: |
    // Mihomo 内联脚本代码。注意：使用 | 符号表示多行字符串。

    // 定义您的智能选择函数，其名称必须和 proxy-groups 中的调用名一致
    async function select_smart_function() {
      const proxies = ["DIRECT", "♻️ 自动选择"];
      const testUrl = "https://www.gstatic.com/generate_204";
      const testCount = 3; 
      const timeout = 2000; 

      async function testDelay(proxy) {
        let sum = 0;
        let success = 0;
        for (let i = 0; i < testCount; i++) {
          const start = Date.now();
          try {
            const res = await $fetch(testUrl, { proxy, timeout });
            if (res.status === 204 || res.status === 200) {
              sum += (Date.now() - start);
              success++;
            }
          } catch (e) {}
        }
        return (success === 0) ? Infinity : Math.round(sum / success);
      }
      
      let results = [];
      for (const p of proxies) {
        const avg = await testDelay(p);
        results.push({ proxy: p, avg });
      }
      results.sort((a, b) => a.avg - b.avg);
      
      // 必须使用 $done 来返回结果
      $done(results[0].proxy); 
    }

rule-providers:
  LocalAreaNetwork:
    type: http
    behavior: classical
    format: text
    path: ruleset/LocalAreaNetwork.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/LocalAreaNetwork.list
    interval: 86400
  UnBan:
    type: http
    behavior: classical
    format: text
    path: ruleset/UnBan.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/UnBan.list
    interval: 86400
  QiufengAD:
    type: http
    behavior: domain
    format: yaml
    path: ruleset/QiufengAD.yaml
    url: https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Clash.yaml
    interval: 86400
  ChinaDomain:
    type: http
    behavior: classical
    format: text
    path: ruleset/ChinaDomain.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ChinaDomain.list
    interval: 86400
  ChinaCompanyIp:
    type: http
    behavior: classical
    format: text
    path: ruleset/ChinaCompanyIp.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ChinaCompanyIp.list
    interval: 86400
  ChinaMedia:
    type: http
    behavior: classical
    format: text
    path: ruleset/ChinaMedia.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ChinaMedia.list
    interval: 86400
  Bing:
    type: http
    behavior: classical
    format: text
    path: ruleset/Bing.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Bing.list
    interval: 86400
  OneDrive:
    type: http
    behavior: classical
    format: text
    path: ruleset/OneDrive.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/OneDrive.list
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    format: text
    path: ruleset/Microsoft.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Microsoft.list
    interval: 86400
  Apple:
    type: http
    behavior: classical
    format: text
    path: ruleset/Apple.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Apple.list
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    format: text
    path: ruleset/Telegram.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Telegram.list
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    format: text
    path: ruleset/Netflix.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Netflix.list
    interval: 86400
  ProxyMedia:
    type: http
    behavior: classical
    format: text
    path: ruleset/ProxyMedia.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ProxyMedia.list
    interval: 86400
  ProxyGFWlist:
    type: http
    behavior: classical
    format: text
    path: ruleset/ProxyGFWlist.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ProxyGFWlist.list
    interval: 86400

rules:
  - PROCESS-NAME,subs-check*,🎯 全球直连 # 提前捕获代理订阅检查的流量
  - IP-CIDR,1.1.1.1/32,🚀 节点选择
  - IP-CIDR,1.0.0.1/32,🚀 节点选择
  - IP-CIDR,8.8.8.8/32,🚀 节点选择
  - IP-CIDR,8.8.4.4/32,🚀 节点选择
  - RULE-SET,LocalAreaNetwork,🎯 全球直连
  - RULE-SET,UnBan,🎯 全球直连
  - RULE-SET,ChinaDomain,🎯 全球直连
  - RULE-SET,ChinaCompanyIp,🎯 全球直连
  - RULE-SET,ChinaMedia,🎯 全球直连
  - GEOIP,CN,🎯 全球直连
  - DOMAIN-SUFFIX,umengcloud.com,🍃 应用净化
  - DOMAIN-SUFFIX,adbiding.cn,🍃 应用净化
  - DOMAIN-SUFFIX,wxcjgg.cn,🍃 应用净化
  - RULE-SET,QiufengAD,🍃 应用净化
  - RULE-SET,Bing,Ⓜ️ 微软服务
  - RULE-SET,OneDrive,Ⓜ️ 微软服务
  - RULE-SET,Microsoft,Ⓜ️ 微软服务
  - RULE-SET,Apple,🍎 苹果服务
  - RULE-SET,Telegram,📲 电报信息
  - DOMAIN-SUFFIX,imem.app,📲 电报信息
  - RULE-SET,Netflix,🌍 国外媒体
  - RULE-SET,ProxyMedia,🌍 国外媒体
  - RULE-SET,ProxyGFWlist,🚀 节点选择
  - DOMAIN-SUFFIX,strem.io,🚀 节点选择
  - DOMAIN-SUFFIX,torrentio.strem.io,🚀 节点选择
  - DOMAIN-SUFFIX,real-debrid.com,🚀 节点选择
  - DOMAIN-SUFFIX,alldebrid.com,🚀 节点选择
  - DOMAIN-SUFFIX,elfhosted.com,🚀 节点选择
  - DOMAIN-SUFFIX,kodi.tv,🚀 节点选择 # 日志中出现的 kodi.exe 相关的规则
  - DOMAIN-SUFFIX,xbmc.org,🚀 节点选择
  - DOMAIN-SUFFIX,mirrors.kodi.tv,🚀 节点选择
  - DOMAIN-SUFFIX,addons.kodi.tv,🚀 节点选择
  - DOMAIN-SUFFIX,github.com,🚀 节点选择
  - DOMAIN-SUFFIX,githubusercontent.com,🚀 节点选择
  - DOMAIN-SUFFIX,raw.githubusercontent.com,🚀 节点选择
  - DOMAIN-SUFFIX,cloudfront.net,🚀 节点选择
  - DOMAIN-SUFFIX,akamaihd.net,🚀 节点选择
  - DOMAIN-KEYWORD,kodi,🚀 节点选择
  - MATCH,🌐 智能兜底
